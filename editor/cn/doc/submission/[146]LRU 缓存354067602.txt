class LRUCache {

    HashMap<Integer, Integer> map;
    Deque<Integer> queue;
    int cap;

    public LRUCache(int capacity) {
        cap = capacity;
        map = new HashMap<>();
        queue = new LinkedList<>();
    }

    public int get(int key) {
        if (map.containsKey(key)) {
            queue.remove(key);
            queue.offerLast(key);
            return map.get(key);
        }
        return -1;
    }

    public void put(int key, int value) {
        if (map.size() <= cap) {
            queue.remove(key);
        } else {
            map.remove(queue.removeFirst());
        }
        queue.offerLast(key);
        map.put(key, value);
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */

//total_testcases:22
//total_correct:7
//input_formatted:["LRUCache","put","put","get","put","get","put","get","get","get"]
[[2],[1,1],[2,2],[1],[3,3],[2],[4,4],[1],[3],[4]]
//expected_output:[null,null,null,1,null,-1,null,-1,3,4]
//code_output:[null,null,null,1,null,2,null,-1,3,4]
