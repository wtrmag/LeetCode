class Solution {
    public String minNumber(int[] nums) {
        int n = nums.length;
        String[] strings = new String[n];
        for (int i = 0; i < n; i++) {
            strings[i] = String.valueOf(nums[i]);
        }
//        quickSort(strings, 0, n - 1);
        Arrays.sort(strings, (x, y) -> (x+y).compareTo(y+x));
        StringBuilder sb = new StringBuilder();
        for (String str : strings) {
            sb.append(str);
        }
        return sb.toString();
    }

//    public void quickSort(String[] nums, int left, int right) {
//        if (left >= right) {
//            return;
//        }
//        int pivot = partition(nums, 0, nums.length - 1);
//        quickSort(nums, 0, pivot - 1);
//        quickSort(nums, pivot + 1, nums.length - 1);
//    }
//
//    public int partition(String[] nums, int left, int right) {
//        int pivot = left;
//        while (left < right) {
//            while (left < right && (nums[left] + nums[pivot]).compareTo(nums[pivot] + nums[left]) < 0) {
//                left++;
//            }
//            while (left < right && (nums[right] + nums[pivot]).compareTo(nums[pivot] + nums[right]) >= 0) {
//                right--;
//            }
//            if (left < right) {
//                String temp = nums[left];
//                nums[left] = nums[right];
//                nums[right] = temp;
//            }
//        }
//        nums[right] = nums[pivot];
//        return right;
//    }
}

//runtime:4 ms
//memory:40.9 MB
