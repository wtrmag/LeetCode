class Solution {
    public int findKthLargest(int[] nums, int k) {
        int n = nums.length;
        k = n - k;

        int low = 0, high = n - 1;
        while (low <= high) {
            int pivot = partition(nums, low, high);
            if (pivot < k) {
                low = pivot + 1;
            } else if (pivot > k) {
                high = pivot - 1;
            } else {
                return nums[pivot];
            }
        }

        return -1;
    }

    public int partition(int[] nums, int left, int right) {
        int pivot = left;
        while (left < right) {
            while (left < right && nums[right] >= nums[pivot]) {
                right--;
            }
            while (left < right && nums[left] < nums[pivot]) {
                left++;
            }
            if (left < right) {
                int temp = nums[left];
                nums[left] = nums[right];
                nums[right] = temp;
            }
        }
        nums[left] = nums[pivot];

        return left;
    }
}

//runtime:175 ms
//memory:41.9 MB
