class Solution {
    public int findKthLargest(int[] nums, int k) {
        int n = nums.length;
        sort(nums, 0, n - 1);

        return nums[n - k];
    }

    public void sort(int[] nums, int low, int high) {
        if (low >= high) {
            return;
        }

        int pivot = partition(nums, low, high);
        sort(nums, low, pivot - 1);
        sort(nums, pivot + 1, high);
    }

    public int partition(int[] nums, int left, int right) {
        int pivot = left;
        while (left < right) {
            while (left < right && nums[right] >= nums[pivot]) {
                right--;
            }
            while (left < right && nums[left] < nums[pivot]) {
                left++;
            }
            if (left < right) {
                int temp = nums[left];
                nums[left] = nums[right];
                nums[right] = temp;
            }
        }
        nums[left] = nums[pivot];

        return left;
    }
}

//runtime:194 ms
//memory:41.6 MB
