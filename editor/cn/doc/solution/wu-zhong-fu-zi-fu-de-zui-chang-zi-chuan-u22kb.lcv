### 解题思路

【生哥刷题】【单片机工程师】
----这里道题目用C语言来做的思路。

### 纯滑动窗口

关键点有：
1：滑动窗口的核心思想,如下所示：
2：使用双指针进行窗口的维护left 和 right
3：当出现重复时，需要找到起一个出现重复的位置
4：当出现重复时，修改对应的left下标

* 

```
输入: s = "abcabcbb"
int left = 0;
int right = 0;
双指指针其实都是指向s[0]
1.当没有重复的时候，right下标往前
2.出现重复的时候该怎么处理。hash思想的利用
 a  b  c  a  bcbb
 ^        ^
 |        |
left      right 的位置如下 
那么此时为了去掉重复的字符该这么做呢？
left往前走。同时此时记录下重复的字符个数3 a b c
 a  b  c  a  bcbb
    ^     ^
    |     |
    left  right 的位置如下
此时就没有重复的啦

在如下：
 a  b  b  a  bcbb
 ^     ^
 |     |
left  right 位置 出现了重复的
该怎么处理
 a  b    b   a  bcbb
        ^^
        ||
        left right 
left right 都指向b 此时最大无重复的值是2 a b
```

### 数组hash + 滑动窗口

关键点有：
1：使用2个指针来索引字符串
2：hash思想-即值和位置之间的关系。
3：保存最大的无重复字符串的长度即可
时间复杂度是：O(n)
空间复杂度是 O(n)

### 点个赞收藏，我们一起变强，这里是只会C也要学算法的生哥

### 代码

* [-纯滑动窗口]

```c
int lengthOfLongestSubstring(char * s)
{
    //类似于hash的思想
    //滑动窗口维护
    int left = 0;
    int right = 0;
    int max = 0;
    int i,j;
    int len = strlen(s);
    int haveSameChar = 0;
    for(i =0; i < len ; i++  )
    {
        if(left <= right)
        {   
            //检测是否出现重复
             //循环遍历整个数组 left -> right
            haveSameChar = 0;
            for(j = left; j < right ; j++)
            {
                if(s[j] == s[right])
                {
                    haveSameChar = 1;
                    break;
                }
            }
            if(haveSameChar)
            {
                //指向下一个
                left = j +1;
            }
        }
        //统计最大的间距
        max = max < (right - left + 1) ? (right - left + 1): max;
        right++;
    }
    return max;
}
```

* [-数组hash+滑动窗口]

```c
int lengthOfLongestSubstring(char * s)
{
    //类似于hash的思想
    //因为字符ASCII的最大值为127
    int hash[127] = {0};    
    //双指针思想 维护2个窗口
    int left = 0;
    int right = 0;
    int max = 0;

    //循环遍历整个数组
    while(s[right])
    {
        if(hash[s[right]] && left < hash[s[right]])
        {   
            //右侧重复出现
            //左指针向前移动
            left = hash[s[right]];  
        }
        //记录当前
        //保存如果出现重复原始时，下标指向的位置
        hash[s[right]] = right + 1;
        max = max < (right - left + 1) ? (right - left + 1): max;
        right++;//右指针每次都要加一。
    }
    return max;
}
```

* [-滑动+哈希]

```c
int lengthOfLongestSubstring(char* s)
{
    //滑动窗口

    int indexLeft   = 0;
    int indexRight  = 0;
    int len = strlen(s);


    int hashMap[255] = { 0 };
    int maxCount = 0;
    while (indexRight < strlen(s))
    {
        if (hashMap[s[indexRight]] != 0)
        {
            //重复出现了
            if(hashMap[s[indexRight]] > indexLeft)
                indexLeft = hashMap[s[indexRight]];
            hashMap[s[indexRight]] = indexRight + 1;
        }
        else
        {
            hashMap[s[indexRight]] = indexRight + 1;
        }
        maxCount = fmax(maxCount, indexRight - indexLeft + 1);
        indexRight++;
    }
    return maxCount;
}
```

#### 滑动窗口入门练习题

| 题目 | 题解 | 难度 |说明|
| :---| :---: | :---:|:---|
|[485. 最大连续 1 的个数](https://leetcode-cn.com/problems/max-consecutive-ones/)|[题解](https://leetcode-cn.com/problems/max-consecutive-ones/solution/by-goodgoodday-u4hl/)|简单|统计数组中最大连续的1的个数|
|[487. 最大连续1的个数II](https://leetcode-cn.com/problems/max-consecutive-ones-ii/)|[题解](https://leetcode-cn.com/problems/max-consecutive-ones-ii/solution/-by-goodgoodday-gjmt/)|中等|统计数组中最大连续的1的个数,允许出现1个零|
|[713. 乘积小于K的子数组](https://leetcode-cn.com/problems/subarray-product-less-than-k/)|[题解](https://leetcode-cn.com/problems/subarray-product-less-than-k/solution/cheng-ji-xiao-yu-kde-zi-shu-zu-cyu-yan-c-vq9o/)|中等|统计乘积小于k的子数组的个数|
|[1004. 最大连续1的个数III](https://leetcode-cn.com/problems/max-consecutive-ones-iii/)|[题解](https://leetcode-cn.com/problems/max-consecutive-ones-iii/solution/1004-zui-da-lian-xu-1de-ge-shu-iii-by-go-z1ps/)|中等|统计数组中最大连续的1的个数,允许出现k个零|
