**说明**：本题解于 2021 年 8 月 6 日重写，[📺 视频讲解（2022 年 5 月 9 日发布）](https://www.bilibili.com/video/BV1La411J7q9?spm_id_from=333.999.0.0)。

这道题据说是面试的高频考题，同时也是基础排序算法的应用。因为篇幅的原因，没有办法把每一个知识点都介绍得很详细，大家可以自行学习相关知识点以理解题解中的内容。

本题解分为四个部分：

+ 理解题意，做任何一道算法问题都需要搞清楚题目的意思，这部分是很重要的，只有搞清楚题目的意思，才能找到解决问题的算法与数据结构；
+ 方法一：暴力解法，这是根据题目意思能得到的最直接的解法，时间复杂度较高；
+ 方法二：通过 `partition` 减治，这是快速排序 `partition` 的应用；
+ 方法三：动态求出最值元素，是「优先队列」的应用。

方法二必须把所有的数据读入内存中，方法三在数据量很大的时候，可以实现「在线算法」，不用一下子把所有数据读入内存。

![image.png](https://pic.leetcode-cn.com/97186c31a9c3a4af8654c52e5e15e1073d623a57fb4d7fc04b32cc914b906c12-image.png)

---

**题意分析**：

题目要求我们找到「数组排序后的第 $k$ 个最大的元素，而不是第 $k$ 个不同的元素」。「数组排序后的第 $k$ 个最大的元素」换句话说：从右边往左边数第 $k$ 个元素（从 $1$ 开始），那么从左向右数是第几个呢，我们列出几个找找规律就好了。

+ 一共 $6$ 个元素，找第 $2$ 大，下标是 $4$；
+ 一共 $6$ 个元素，找第 $4$ 大，下标是 $2$。

因此升序排序以后，**目标元素的下标是 $N - k$**，这里 $N$ 是输入数组的长度。

---

### 方法一：暴力解法

**参考代码 1**：

* []

```Java
import java.util.Arrays;

public class Solution {

    public int findKthLargest(int[] nums, int k) {
        int len = nums.length;
        Arrays.sort(nums);
        return nums[len - k];
    }
}
```

* []

```C++
#include <iostream>
#include <vector>

using namespace std;

class Solution {
public:
    int findKthLargest(vector<int> &nums, int k) {
        int size = nums.size();
        sort(begin(nums), end(nums));
        return nums[size - k];
    }
};
```

* []

```Python
from typing import List


class Solution:
    def findKthLargest(self, nums: List[int], k: int) -> int:
        size = len(nums)
        nums.sort()
        return nums[size - k]
```

**复杂度分析**：
+ 时间复杂度：$O(N \log N)$，这里 $N$ 是数组的长度，算法的性能消耗主要在排序，JDK 默认使用快速排序，因此时间复杂度为 $O(N \log N)$；
+ 空间复杂度：$O(\log N)$，这里认为编程语言使用的排序方法是「快速排序」，空间复杂度为递归调用栈的高度，为 $\log N$。

其实这道问题考察了「快速排序」的 `partition` 操作和数据结构「堆」的应用，方法二和方法三分别介绍了这两种方法。

---

### 方法二：减而治之（逐渐缩小问题规模）

[📺 本题视频讲解（2022 年 5 月 9 日发布）](https://www.bilibili.com/video/BV1La411J7q9?spm_id_from=333.999.0.0)。

「快速排序」虽然快，但是「快速排序」在遇到特殊测试用例（「顺序数组」或者「逆序数组」）的时候，递归树会退化成链表，时间复杂度会变成 $O(N^2)$。

事实上，有一个很经典的基于「快速排序」的算法，可以通过一次遍历，确定某一个元素在排序以后的位置，这个算法叫「快速选择」。要理解「快速选择」算法，必须先理解「快速排序」的「partition」，我录制了一系列视频向大家介绍了「快速排序」的演变路径、设计思想与代码详解，欢迎大家点击观看。

> 📺 「快速排序」视频讲解：[「算法不好玩（专题 6）：快速排序」](https://www.bilibili.com/video/BV1fS4y1a7zF/?spm_id_from=333.788)

**注意**：本题必须随机初始化 `pivot` 元素，否则通过时间会很慢，因为测试用例中有极端测试用例。为了应对极端测试用例，使得递归树加深，可以在循环一开始的时候，随机交换第 $1$ 个元素与它后面的任意 $1$ 个元素的位置。

**参考代码 2**：

* []

```Java
import java.util.Random;


class Solution {
    
    private final static Random random = new Random(System.currentTimeMillis());
    
    public int findKthLargest(int[] nums, int k) {
        // 第 1 大的数，下标是 len - 1;
        // 第 2 大的数，下标是 len - 2;
        // ...
        // 第 k 大的数，下标是 len - k;
        int len = nums.length;
        int target = len - k;
        
        int left = 0;
        int right = len - 1;
        
        while (true) {
            int pivotIndex = partition(nums, left, right);
            if (pivotIndex == target) {
                return nums[pivotIndex]; 
            } else if (pivotIndex < target) {
                left = pivotIndex + 1; 
            } else {
                // pivotIndex > target
                right = pivotIndex - 1; 
            }
        }
    }
    
    private int partition(int[] nums, int left, int right) {
        int randomIndex = left + random.nextInt(right - left + 1);
        swap(nums, left, randomIndex);
        
        
        // all in nums[left + 1..le) <= pivot;
        // all in nums(ge..right] >= pivot;
        int pivot = nums[left];
        int le = left + 1;
        int ge = right;
        
        while (true) {
            while (le <= ge && nums[le] < pivot) {
                le++;
            }
            
            while (le <= ge && nums[ge] > pivot) {
                ge--;
            }
            
            if (le >= ge) {
                break;
            }
            swap (nums, le, ge);
            le++;
            ge--;
        }
        
        swap(nums, left, ge);
        return ge;
    }
    
    private void swap(int[] nums, int index1, int index2) {
        int temp = nums[index1];
        nums[index1] = nums[index2];
        nums[index2] = temp;
    }
    
}
```

**复杂度分析**：
+ 时间复杂度：$O(N)$，这里 $N$ 是数组的长度，理由可以参考本题解下用户 @ZLW 的评论，需要使用主定理进行分析；
+ 空间复杂度：$O(1)$，**在我的代码里没有使用递归**，在逐渐缩小搜索区间的过程中只使用到常数个变量。

> **说明**：可能有一部分朋友看到这道题有「递归」的写法，但是本题解采用的是在 `while (true)` 循环中，通过 `left` 与 `right` 向中间靠拢的方式逐步缩小搜索区间，没有使用递归调用栈（也无须使用递归调用栈），因此空间复杂度是 $O(1)$。

---

### 方法三：优先队列

优先队列的思路是很朴素的。由于找第 `K` 大元素，其实就是整个数组排序以后后半部分最小的那个元素。因此，我们可以维护一个有 `K` 个元素的最小堆：

+ 如果当前堆不满，直接添加；
+ 堆满的时候，如果新读到的数小于等于堆顶，肯定不是我们要找的元素，只有新遍历到的数大于堆顶的时候，才将堆顶拿出，然后放入新读到的数，进而让堆自己去调整内部结构。

说明：这里最合适的操作其实是 `replace()`，即直接把新读进来的元素放在堆顶，然后执行下沉（`siftDown()`）操作。Java 当中的 `PriorityQueue` 没有提供这个操作，只好先 `poll()` 再 `offer()`。

优先队列的写法就很多了，这里只例举一个有代表性的，其它的写法大同小异，没有本质差别。

**参考代码 3**：

* []

```Java
import java.util.Comparator;
import java.util.PriorityQueue;

public class Solution {

    public int findKthLargest(int[] nums, int k) {
        int len = nums.length;
        // 使用一个含有 k 个元素的最小堆，PriorityQueue 底层是动态数组，为了防止数组扩容产生消耗，可以先指定数组的长度
        PriorityQueue<Integer> minHeap = new PriorityQueue<>(k, Comparator.comparingInt(a -> a));
        // Java 里没有 heapify ，因此我们逐个将前 k 个元素添加到 minHeap 里
        for (int i = 0; i < k; i++) {
            minHeap.offer(nums[i]);
        }

        for (int i = k; i < len; i++) {
            // 看一眼，不拿出，因为有可能没有必要替换
            Integer topElement = minHeap.peek();
            // 只要当前遍历的元素比堆顶元素大，堆顶弹出，遍历的元素进去
            if (nums[i] > topElement) {
                // Java 没有 replace()，所以得先 poll() 出来，然后再放回去
                minHeap.poll();
                minHeap.offer(nums[i]);
            }
        }
        return minHeap.peek();
    }
}
```

**复杂度分析**：
+ 时间复杂度：$O(N \log K)$，遍历数据 $O(N)$，堆内元素调整 $O(\log K)$；
+ 空间复杂度：$O(K)$。

