### 解题思路

**堆**：维护一个长度为`k`的优先队列，并从小到大排列，如果新元素比头部元素大，头部元素不再是前`k`大，弹出，不断更新即可，最后头元素即是第`k`大

**快速选择**：`快排每一趟扫描都会定位一位数字到正确位置，并且其左边元素小于它，右边元素大于它`，因此我们可以根据这个数字只排需要找的区间，不再是两边都要排

### 代码

#### 优先队列

* cpp

```cpp
class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        priority_queue<int, vector<int>, greater<>> q;
        for (const auto &num: nums) {
            if (q.size() < k) {
                q.push(num);
            } else if (q.top() < num) {
                q.pop();
                q.push(num);
            }
        }
        return q.top();
    }
};
```

#### 快速选择

* cpp

```cpp
class Solution {
public: 
    // 关于排序基准，试了三种方法，随机数、首位元素、两端和中间点取中值，结果是随机更快一点
    int partition(vector<int>& nums, int left, int right) {
        // 为了防止第一位元素是最小或者最大的那几个，取随机元素，尽量每次将区间对半分
        int idx = rand() % (right - left + 1) + left;
        swap(nums[left], nums[idx]);
        int base = nums[left];
        // 快速排序，注意是从大到小，因为我们找的是第K 大
        while (left < right) {
            while (left < right && nums[right] <= base) {
                --right;
            }
            nums[left] = nums[right];
            while (left < right && nums[left] >= base) {
                ++left;
            }
            nums[right] = nums[left];
        }
        nums[left] = base;
        return left;
    }

    int findKthLargest(vector<int>& nums, int k) {
        srand(time(NULL));
        int l = 0, r = nums.size() - 1;
        // 迭代法实现，避免递归造成空间开销
        while (l <= r) {
            int pivot = partition(nums, l, r);
            // 元素下标从0开始
            if (pivot + 1 == k) {
                return nums[pivot];
            } else if (pivot + 1 < k) {
                // 如果基准是前K大，第K大元素位于其右边
                l = pivot + 1;
            } else {
                // 与上面相反
                r = pivot - 1;
            }
        }
        return 0;
    }
};
```

