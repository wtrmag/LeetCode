/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        if (root == null) {
            return Collections.emptyList();
        }
        List<Integer> list = new ArrayList<>();  //保存结果
        Stack<TreeNode> stack = new Stack<>();   //调用栈
        stack.push(root);    //先将根结点入栈
        while (!stack.isEmpty()) {
            TreeNode t = stack.pop();
            if (t != null) {
                if (t.right != null) {
                    stack.push(t.right);
                }
                stack.push(t);  //在左结点之前重新插入该结点，以便在左结点之后处理（访问值）
                stack.push(null); //空结点随之入栈，标识已经访问过，但还没有被处理（还可以进行额外操作）
                if (t.left != null) {
                    stack.push(t.left);
                }
            } else {
                list.add(stack.pop().val);
            }
        }
        return list;
    }
}

//runtime:1 ms
//memory:37.9 MB
